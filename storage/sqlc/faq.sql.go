// Code generated by sqlc. DO NOT EDIT.
// source: faq.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createFaq = `-- name: CreateFaq :one
INSERT INTO faq (
        id,
        question,
        answer,
        slug,
        lang,
        active,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, question, answer, slug, lang, active, created_at, updated_at
`

type CreateFaqParams struct {
	ID        string       `json:"id"`
	Question  *string      `json:"question"`
	Answer    *string      `json:"answer"`
	Slug      *string      `json:"slug"`
	Lang      *string      `json:"lang"`
	Active    sql.NullBool `json:"active"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt time.Time    `json:"updated_at"`
}

func (q *Queries) CreateFaq(ctx context.Context, arg CreateFaqParams) (Faq, error) {
	row := q.db.QueryRowContext(ctx, createFaq,
		arg.ID,
		arg.Question,
		arg.Answer,
		arg.Slug,
		arg.Lang,
		arg.Active,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Faq
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.Slug,
		&i.Lang,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFaq = `-- name: DeleteFaq :exec
DELETE FROM faq
WHERE id = $1
`

func (q *Queries) DeleteFaq(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFaq, id)
	return err
}

const geeFaq = `-- name: GeeFaq :one
SELECT id, question, answer, slug, lang, active, created_at, updated_at
FROM faq
WHERE slug = $1 and lang = $2
LIMIT 1
`

type GeeFaqParams struct {
	Slug *string `json:"slug"`
	Lang *string `json:"lang"`
}

func (q *Queries) GeeFaq(ctx context.Context, arg GeeFaqParams) (Faq, error) {
	row := q.db.QueryRowContext(ctx, geeFaq, arg.Slug, arg.Lang)
	var i Faq
	err := row.Scan(
		&i.ID,
		&i.Question,
		&i.Answer,
		&i.Slug,
		&i.Lang,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const geteFaq = `-- name: GeteFaq :many
SELECT id, question, answer, slug, lang, active, created_at, updated_at
FROM faq
WHERE lang = $1
ORDER BY created_at desc
LIMIT $3 OFFSET $2
`

type GeteFaqParams struct {
	Lang   *string `json:"lang"`
	Offset int32   `json:"offset_"`
	Limit  int32   `json:"limit_"`
}

func (q *Queries) GeteFaq(ctx context.Context, arg GeteFaqParams) ([]Faq, error) {
	rows, err := q.db.QueryContext(ctx, geteFaq, arg.Lang, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faq
	for rows.Next() {
		var i Faq
		if err := rows.Scan(
			&i.ID,
			&i.Question,
			&i.Answer,
			&i.Slug,
			&i.Lang,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFaq = `-- name: UpdateFaq :exec
UPDATE faq
SET question = COALESCE($1, question),
    answer = COALESCE($2, answer),
    active = COALESCE($3, active),
    updated_at = COALESCE($4, updated_at)
WHERE slug = $5 and lang = $6
`

type UpdateFaqParams struct {
	Question  *string      `json:"question"`
	Answer    *string      `json:"answer"`
	Active    sql.NullBool `json:"active"`
	UpdatedAt time.Time    `json:"updated_at"`
	Slug      *string      `json:"slug"`
	Lang      *string      `json:"lang"`
}

func (q *Queries) UpdateFaq(ctx context.Context, arg UpdateFaqParams) error {
	_, err := q.db.ExecContext(ctx, updateFaq,
		arg.Question,
		arg.Answer,
		arg.Active,
		arg.UpdatedAt,
		arg.Slug,
		arg.Lang,
	)
	return err
}
